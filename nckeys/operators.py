"""
This file defines divided difference, Demazure, and atom operators.
"""

from .core.cache import cache

from .matrix import Matrix
from .lib import sl2string
from .composition import Composition, Compositions
from .constants import *

@cache
def divided_difference(i, deg, n) -> Matrix:
    """The `i`-th divided difference operator ∂ᵢ.

    Returns the matrix representing ∂ᵢ in the monomial basis of the polynomial
    ring in `n` variables.

    DOMAIN / ROW LABELS:
        The degree `deg` homogeneous component of the polynomial ring in `n` 
        variables.

    CODOMAIN / COLUMN LABELS:
        If `deg` is greater than 0, the degree `deg-1` homogeneous component of 
        the polynomial ring in `n` variables.

        Otherwise, it is the constant component.

    The divided difference operator ∂ᵢ is defined generally by the expression

                  f - sᵢf
                ─────────── .
                 xᵢ - xᵢ₊₁

    Where sᵢ acts by swapping xᵢ and xᵢ₊₁.
    """

    if i >= n-1 or i < 0:
        raise IndexError(f"i: {i}, n: {n}")
    
    if deg < 0:
        raise IndexError(f"deg: {deg}")
    
    if deg == 0:
        return Matrix(Compositions(0, n), Compositions(0,n))

    # Set up matrix
    rows = Compositions(deg, n)
    cols = Compositions(deg-1, n)
    out = Matrix(
        rows, 
        cols, 
        name=f"∂({i})",
        rows_name=f"{COMP_SYMB}(deg: {deg}, n: {n})",
        cols_name=f"{COMP_SYMB}(deg: {deg-1}, n: {n})"
    )

    # Compute the divided difference operator on each basis element `row`, which
    # is a monomial, i.e, a composition of degree `deg` with `n` parts
    for row in rows:

        # Get the degree of x_i and x_j = x_{i+1} in `row`.
        deg_i = row[i]
        deg_j = row[i+1]

        # If deg_i = deg_j, then monomial is symmetric in x_i and x_j, so it 
        # gets killed by the divided difference operator.
        if deg_i == deg_j:
            continue

        # Otherwise, we lower the larger variable, and choose a sign based on
        # whether or not the larger one is i or i+1.
        diminished = list(row)
        if deg_i > deg_j:
            diminished[i] -= 1
            sign = 1
        else:
            diminished[i+1] -= 1
            sign = -1
        diminished = Composition(*diminished)

        # Then the result is the 2-string generated by row, multiplied by the
        # aforementioned sign.
        for col in diminished.sl2string(i, i+1):
            out[row, col] = sign

    return out


@cache
def xmul(i, deg, n) -> Matrix:
    """Multiplication by xᵢ.

    Returns the matrix representing xᵢ in the monomial basis of the polynomial 
    ring in `n` variables.

    DOMAIN / ROW LABELS:
        The degree `deg` homogeneous component of the polynomial ring in `n` 
        variables.

    CODOMAIN / COLUMN LABELS:
        The degree `deg+1` homogeneous component of the polynomial ring in `n` 
        variables.
    """

    rows = Compositions(deg, n)
    cols = Compositions(deg + 1, n)
    out = Matrix(
        rows, 
        cols, 
        name=f"x({i})",
        rows_name=f"{COMP_SYMB}(deg: {deg}, n: {n})",
        cols_name=f"{COMP_SYMB}(deg: {deg+1}, n: {n})"
    )

    for row in rows:
        col = list(row)
        col[i] += 1
        col = tuple(col)
        out[row, col] = 1

    return out


@cache
def demazure_operator(i, deg, n) -> Matrix:
    """The `i`-th Demazure operator πᵢ

    Returns the matrix representing πᵢ in the monomial basis of the polynomial 
    ring in `n` variables.

    DOMAIN / ROW LABELS:
        The degree `deg` homogeneous component of the polynomial ring in `n` 
        variables.

    CODOMAIN / COLUMN LABELS:
        The degree `deg` homogeneous component of the polynomial ring in `n` 
        variables.

    Here, the Demazure operator is defined by the formula
    
                πᵢ := ∂ᵢxᵢ
    
    where ∂ᵢ is the `i`-th divided difference operator.
    """

    dd = divided_difference(i, deg+1, n)
    x = xmul(i, deg, n)

    out = x * dd
    out._name = f"π({i})"
    return out


@cache
def demazure(word, deg, n) -> Matrix:
    """The Demazure operator indexed by `word`.

    Returns the matrix representing the Demazure operator in the monomial basis 
    of the polynomial ring in `n` variables.

    DOMAIN / ROW LABELS:
        The degree `deg` homogeneous component of the polynomial ring in `n` 
        variables.

    CODOMAIN / COLUMN LABELS:
        The degree `deg` homogeneous component of the polynomial ring in `n` 
        variables.
    """

    out = Matrix.identity(Compositions(deg, n))

    for w in word:
        out *= demazure_operator(w, deg, n)

    out._name = f"π_[{', '.join(str(w) for w in word)}]"
    out._rows_name = f"{COMP_SYMB}(deg: {deg}, n: {n})"
    out._cols_name = f"{COMP_SYMB}(deg: {deg}, n: {n})"
    
    return out


@cache
def atom_operator(i, deg, n):
    """The `i`-th atom operator θᵢ

    Returns the matrix representing θᵢ in the monomial basis of the polynomial 
    ring in `n` variables.

    DOMAIN / ROW LABELS:
        The degree `deg` homogeneous component of the polynomial ring in `n` 
        variables.

    CODOMAIN / COLUMN LABELS:
        The degree `deg` homogeneous component of the polynomial ring in `n` 
        variables.

    We define the atom operator by the formula
    
                θᵢ := x_{i+1}∂ᵢ
                
    """

    dd = divided_difference(i, deg, n)
    x = xmul(i+1, deg-1, n)

    out = dd * x
    out._name = f"θ({i})"
    return out


@cache
def atom(word, deg, n) -> Matrix:
    """The atom operator indexed by `word`.

    Returns the matrix representing the atom operator in the monomial basis of 
    the polynomial ring in `n` variables.

    DOMAIN / ROW LABELS:
        The degree `deg` homogeneous component of the polynomial ring in `n` 
        variables.

    CODOMAIN / COLUMN LABELS:
        The degree `deg` homogeneous component of the polynomial ring in `n` 
        variables.
    """

    out = Matrix.identity(Compositions(deg, n))

    for w in word:
        out *= atom_operator(w, deg, n)

    out._name = f"θ_[{', '.join(str(w) for w in word)}]"
    out._rows_name = f"{COMP_SYMB}(deg: {deg}, n: {n})"
    out._cols_name = f"{COMP_SYMB}(deg: {deg}, n: {n})"
    
    return out